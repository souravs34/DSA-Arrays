// Brute Force
Sort array and compare

for(i=n-2;i>=0;i--){
  if(arr[i] != largest){
     secondL = arr[i];
     break;
  }
}

// TC NLog(N) + O(N)


// Better Solution

First pass and find the largest element.
Second pass and find the largest element that is not largest.

// TC O(2N) 



// Optimal Solution

largest = arr[0], slargest = INT_MIN

As we traverse largest changes and the slargest will be the 
previous value of largest before changing.

----------------------------------------------------------------
int secondLargest(vector<int> &a,int n){
    int largest = a[0];
    int slargest = -1;
    for(int i=1;i<n;i++){
        if(a[i] > largest){
            slargest = largest;
            largest = a[i];
        }else if(a[i] < largest && a[i] > slargest){
            slargest = a[i];
        }
    }
    return slargest;
}
int secondSmallest(vector<int> &a,int n){
    int smallest = a[0];
    int ssmallest = INT_MAX;
    for(int i=1;i<n;i++){
        if(a[i] < smallest){
            ssmallest = smallest;
            smallest = a[i];
        }else if(a[i] > smallest && a[i] < ssmallest){
            ssmallest = a[i];
        }
    }
    return ssmallest;
}
vector<int> getSecondOrderElements(int n, vector<int> a) {
    int slargest = secondLargest(a,n);
    int ssmallest = secondSmallest(a,n);
    return {slargest,ssmallest};
}
--------------------------------------------------------------

// TC - O(N)
